%OptimalWeight - Simulation of a user comparing two weights
%   Implementation by max during the workshop of the first day of MBM 2022/2023
%
%   Description:
%       Implementing two models of an "optimal observer" in a psychophysical experiment.
%
%   Output:
%       Picture of a "psychometric function"
%
%   Other m-files required: none
%   MAT-files required: none
%
%   See also: 
%   Author: Darshan Gohil
%   email: dxg288@student.bham.ac.uk
%   Date: 14/02/2023
%
%   Last revision: 14/02/2023, Darshan Gohil, Algorithm changed and finished plotting gausian distribution of the psychometric function

rng('shuffle')

standardStimulus=3.5;
comparisonValue=1:6;
data=zeros(5000,2);

%% Comment here each block
% This code generates 5000 trials of the optimal observer algorithm simulation. 
% At each trial, a comparison stimulus is selected at random from the range of 1 to 6.
% The comparison stimulus and response are stored in the 'data' matrix.
% The standard stimulus value is set to 3.5.
% The sensed comparison stimulus and standard stimulus values are generated by adding random noise with standard deviation of 0.5.
% The observer's answer is recorded as 1 if the difference between the sensed comparison and standard stimuli is less than 1, or 0 otherwise.
% The trial number is tracked using the 'nTrial' variable.
% Randomization without replacement ensures that each comparison stimulus is used only once throughout the 5000 trials, so that the results are not biased by repeated exposure to the same stimulus.


for nTrial=1:5000

    
    comparisonStimulus=randi([1 6]);


    sensedComparisonStimulus=comparisonStimulus+randn*.5;
    sensedStandardStimulus=standardStimulus+randn*.5;
    
    %% This needs to be changed
    if abs(sensedComparisonStimulus - sensedStandardStimulus) < 1
        answer=1;
    else
        answer=0;
    end


    data(nTrial,:)=[comparisonStimulus answer];
end

%% Comment here each block
% The code generates a histogram of the observer's responses for each value of the comparison stimulus.
% The 'valueComparison' variable iterates over each value of the comparison stimulus from 1 to 6.
% The responses for each value of the comparison stimulus are selected from the 'data' matrix using the condition data(:,1)==valueComparison.
% The mean response for each value of the comparison stimulus is then calculated using the mean function and stored in the 'meanResponse' variable.

for valueComparison=comparisonValue
responsesForValueComparison=data(data(:,1)==valueComparison,2);
meanResponse(valueComparison)=mean(responsesForValueComparison);
end


%% Comment here each block
% The code creates a plot of the mean response against the comparison stimulus value.
% The mean response is calculated for each value of the comparison stimulus in the 'meanResponse' variable.
% The plot is displayed using the 'plot' function with the comparison stimulus value on the x-axis and the mean response on the y-axis.
% The plot is styled with '--*b' to show blue asterisks connected by a dashed line.
% The x-axis is labeled with 'Value of the Comparison stimulus' and the y-axis is labeled with 'mean response'.
% The axis limits are set using the 'axis' function, with the x-axis ranging from -0.5 to 6.5 and the y-axis ranging from -0.1 to 1.1.
% The x-axis ticks are set using the 'xticks' function to be the values 1 through 6.
% The y-axis ticks are set using the 'yticks' function to be the values 0, 0.5, and 1.

plot(1:6, meanResponse,'--*b')
xlabel('Value of the Comparison stimulus')
ylabel('mean response')
axis([-.5 6.5 -0.1 1.1])
xticks(1:6)
yticks([0 .5 1])


%% Comment here each block
% This code block calculates the mean response for each comparison value and standardizes it by dividing by the sum of mean responses.
% The first moment of the distribution is then calculated by taking the dot product of the comparison values and the standardized mean response.
% The corrected comparison values are calculated by subtracting the first moment from each comparison value.
% The variance of the distribution is calculated by taking the dot product of the mean response and the square of the corrected comparison values.

standardizedMeanResponse=meanResponse/sum(meanResponse);
firstMoment=sum(comparisonValue.* standardizedMeanResponse);

correctedComparisonValue=comparisonValue-firstMoment;
variance=sum(meanResponse.*correctedComparisonValue.^2);

%% Finish by plotting the Gaussian distribution on top of the psychometric function

% Generate the Gaussian distribution
x = linspace(-5,5,100);
y = normpdf(x, 0, sqrt(variance));

% Plot the Gaussian distribution
plot(x+firstMoment,y,'-r');

% Add legend
legend('Psychometric Function','Gaussian Distribution');