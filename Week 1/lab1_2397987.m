%OptimalWeight - Simulation of a user comparing two weights
%   Implementation by max during the workshop of the first day of MBM 2022/2023
%
%   Description:
%       Implementing two models of an "optimal observer" in a psychophysical experiment.
%
%   Output:
%       Picture of a "psychometric function"
%
%   Other m-files required: none
%   MAT-files required: none
%
%   See also: 
%   Author: Darshan Gohil
%   email: dxg288@student.bham.ac.uk
%   Date: 14/02/2023
%
%   Last revision: 14/02/2023, Darshan Gohil, Algorithm changed and finished plotting gausian distribution of the psychometric function

rng('shuffle')

% The standard stimulus value is set to 3.5.
standardStimulus=3.5;
comparisonValue=1:6;
data=zeros(5000,2);

%% Comment here each block
% This code generates 5000 trials of the optimal observer algorithm simulation. 

% Randomization without replacement ensures that each comparison stimulus is used only once throughout the 5000 trials, so that the results are not biased by repeated exposure to the same stimulus.

% The trial number is tracked using the 'nTrial' variable.
for nTrial=1:5000

    % At each trial, a comparison stimulus is selected at random from the range of 1 to 6.
    comparisonStimulus=randi([1 6]);

    % The sensed comparison stimulus and standard stimulus values are generated by adding random noise with standard deviation of 0.5.
    sensedComparisonStimulus=comparisonStimulus+randn*.5;
    sensedStandardStimulus=standardStimulus+randn*.5;
    
    %% This needs to be changed
    % The observer's answer is recorded as 1 if the difference between the sensed comparison and standard stimuli is less than 1, or 0 otherwise.
    if abs(sensedComparisonStimulus - sensedStandardStimulus) < 1
        answer=1;
    else
        answer=0;
    end

    % The comparison stimulus and response are stored in the 'data' matrix.
    data(nTrial,:)=[comparisonStimulus answer];
end

%% Comment here each block

% The 'valueComparison' variable iterates over each value of the comparison stimulus from 1 to 6.
for valueComparison=comparisonValue

    % The responses for each value of the comparison stimulus are selected from the 'data' matrix using the condition data(:,1)==valueComparison.
    responsesForValueComparison=data(data(:,1)==valueComparison,2);
    
    % The mean response for each value of the comparison stimulus is then calculated using the mean function and stored in the 'meanResponse' variable.
    meanResponse(valueComparison)=mean(responsesForValueComparison);
end


%% Comment here each block
% The code creates a plot of the mean response against the comparison stimulus value.
% The mean response is calculated for each value of the comparison stimulus in the 'meanResponse' variable.
% The plot is displayed using the 'plot' function with the comparison stimulus value on the x-axis and the mean response on the y-axis.
% The plot is styled with '--*b' to show blue asterisks connected by a dashed line.
% The x-axis is labeled with 'Value of the Comparison stimulus' and the y-axis is labeled with 'mean response'.
% The axis limits are set using the 'axis' function, with the x-axis ranging from -0.5 to 6.5 and the y-axis ranging from -0.1 to 1.1.
% The x-axis ticks are set using the 'xticks' function to be the values 1 through 6.
% The y-axis ticks are set using the 'yticks' function to be the values 0, 0.5, and 1.

nexttile
plot(1:6, meanResponse,'--*b')
xlabel('Value of the Comparison stimulus')
ylabel('mean response')
title('Psychometric Function')
axis([-.5 6.5 -0.1 1.1])
xticks(1:6)
yticks([0 .5 1])


%% Comment here each block
% This code block calculates the mean response for each comparison value and standardizes it by dividing by the sum of mean responses.

standardizedMeanResponse=meanResponse/sum(meanResponse);
% The first moment of the distribution is then calculated by taking the dot product of the comparison values and the standardized mean response.
firstMoment=sum(comparisonValue.* standardizedMeanResponse);

% The corrected comparison values are calculated by subtracting the first moment from each comparison value.
correctedComparisonValue=comparisonValue-firstMoment;

% The variance of the distribution is calculated by taking the dot product of the mean response and the square of the corrected comparison values.
variance=sum(meanResponse.*correctedComparisonValue.^2);

%% Finish by plotting the Gaussian distribution on top of the psychometric function

% Calculate the parameters for the Gaussian distribution
mu = firstMoment; % mean
sigma = sqrt(variance); % standard deviation

% Create a range of x values to use for the plot
x = linspace(mu - 4*sigma, mu + 4*sigma, 100); 

% Calculate the y values for the Gaussian distribution
y = (1/(sigma*sqrt(2*pi))) * exp(-(x-mu).^2/(2*sigma^2));

nexttile
% Plot the Gaussian distribution
plot(x, y)
xlabel('Value')
ylabel('Probability density')
title('Gaussian Distribution')

